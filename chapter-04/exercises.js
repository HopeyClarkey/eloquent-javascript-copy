////////////////////////////////////////////////////////////////////////////////
// range ///////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function range(numOne, numTwo, step) {
  let stArr =[]; //create storage array
  if (step == null){ //create case for when no step is given, can be 1
    step = 1;
  }
  if (numOne === numTwo){ //create case for when numbers passed are the same
    return stArr;
  } 
  if (step > 0){ // create case for when number is positive
      for (let i = numOne; i <= numTwo; i += step){ //normal for loop with step
      stArr.push(i); 
    } 
  } else { //create case for when is negative
      for (let i = numOne; i >= numTwo; i += step){ // 
      stArr.push(i);
    }
  }
return stArr; //return storage array
}

////////////////////////////////////////////////////////////////////////////////
// sum /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function sum(array){
  let output = 0; // create output value
  for(let i = 0; i < array.length; i++){ //loop through array
    output += array[i]; //add each iteration to output
  }
  return output; //return that output
}

////////////////////////////////////////////////////////////////////////////////
// reverseArray ////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArray(array) {
 let stArr = []; //create output array
  for (let i = array.length-1; i >= 0; i--){ //loop through array backwards
    stArr.push(array[i]); // push results to storage array
  }
  return stArr; //return storage array
}

////////////////////////////////////////////////////////////////////////////////
// reverseArrayInPlace /////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArrayInPlace(array) {
  let arr2  = array.reverse();
  return array;
}

////////////////////////////////////////////////////////////////////////////////
// arrayToList /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function arrayToList(array) {
  let rest = null;
  for (let i = array.length -1; i >= 0; i--){
    rest = {value: array[i], rest : rest};
  }
  return rest;
}

////////////////////////////////////////////////////////////////////////////////
// listToArray /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
let list1 = {
  value:10,
  rest: {
    value: 20,
    rest: {
      value: 30,
      rest: null
    }
  }
}
//^^this is a list, object created out of nested objects

function listToArray(list, array = []) {
// base
  if (list.rest === null){
    array.push(list.value);
    return array;
  }
//recursion

  //how to update array so that it includes the current value
  array.push(list.value);
  return listToArray(list.rest, array);

}  
console.log(listToArray(list1)); //should return [10, 20, 30]
////////////////////////////////////////////////////////////////////////////////
// prepend /////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function prepend() {

}

////////////////////////////////////////////////////////////////////////////////
// nth /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function nth() {

}

////////////////////////////////////////////////////////////////////////////////
// deepEqual ///////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function deepEqual() {

}

////////////////////////////////////////////////////////////////////////////////
// DON'T REMOVE THIS CODE //////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

if ((typeof process !== 'undefined') &&
  (typeof process.versions.node !== 'undefined')) {
  module.exports = {
    range,
    sum,
    reverseArray,
    reverseArrayInPlace,
    arrayToList,
    listToArray,
    prepend,
    nth,
    deepEqual,
  };
};